# vim: nofoldenable: list:
# PIVARD Julien
# Dernière modification : Vendredi 19 janvier[01] 2018

# On notifie si le mot de passe de Sql a été changé
ifeq ($(Sql_Mdp_Root), mdptropbiensecuretavumagueule)
    $(error Le mot de passe root de Sql doit être changé dans le fichier mdp_root_sql.conf)
endif

# On notifie si le mot de passe de Sql a été changé
ifeq ($(Sql_Mdp_Root), )
    $(error "Vous devez configurer un mot de passe root pour MariaDB avec ./configure")
endif

ifeq ($(Sql_Utilisateur), )
    $(error "Vous devez configurer un nom d'utilisateur pour MariaDB avec ./configure")
endif

ifeq ($(Sql_Pass_Utilisateur), )
    $(error "Vous devez configurer un mdp pour l'utilisateur avec ./configure")
endif

ifeq ($(Sql_Nom_Bdd), )
    $(error "Vous devez configurer un nom de BDD pour MariaDB avec ./configure")
endif

# ------------------------------------------------------- #
# Vérifie si les containers sont construit ou en fonction #
# ------------------------------------------------------- #

# Vérifie si l'image Sql tourne
ifeq ($(shell docker ps --quiet --filter "name=$(Sql_Nom_Container)" ), )
    ifeq ($(shell docker ps --quiet --all --filter "name=$(Sql_Nom_Container)"), )
        #$(info "Le container Sql sera construit.")
        Start_Ou_Run_Sql	= run_sql
    else
        #$(info "La machine Sql sera démarrée depuis le container existant.")
        Start_Ou_Run_Sql	= start_sql
        EXISTE_SQL="err"
    endif
else
    Start_Ou_Run_Sql	= info_sql
    ERROR_SQL="err"
endif

# Vérifie si l'image PHP tourne
ifeq ($(shell docker ps --quiet --filter "name=$(Php_Nom_Container)" ), )
    ifeq ($(shell docker ps --quiet --all --filter "name=$(Php_Nom_Container)"), )
        #$(info "Le container PHP sera construit.")
        Start_Ou_Run_Php	= run_php
    else
        #$(info "La machine PHP sera démarrée depuis le container existant.")
        Start_Ou_Run_Php	= start_php
        EXISTE_PHP="err"
    endif
else
    Start_Ou_Run_Php	= info_php
    ERROR_PHP="err"
endif

# Vérifie si l'image NginX tourne
ifeq ($(shell docker ps --quiet --filter "name=$(Nginx_Nom_Container)" ), )
    ifeq ($(shell docker ps --quiet --all --filter "name=$(Nginx_Nom_Container)"), )
        #$(info "Le container NginX sera construit.")
        Start_Ou_Run_Nginx	= run_nginx
    else
        #$(info "La machine NginX sera démarrée depuis le container existant.")
        Start_Ou_Run_Nginx	= start_nginx
        EXISTE_NGINX="err"
    endif
else
    Start_Ou_Run_Nginx	= info_nginx
    ERROR_NGINX="err"
endif

# Vérifie si l'image Sql unitaire tourne
ifeq ($(shell docker ps --quiet --filter "name=$(Sql_U_Nom_Cont)" ), )
    ifeq ($(shell docker ps --quiet --all --filter "name=$(Sql_U_Nom_Cont)"), )
        #$(info "Le container Sql sera construit.")
        Start_Ou_Run_Sql_U	= run_unitaire_sql
    else
        #$(info "La machine Sql sera démarrée depuis le container existant.")
        Start_Ou_Run_Sql_U	= start_unitaire_sql
        EXISTE_SQL_U="err"
    endif
else
    Start_Ou_Run_Sql_U	= info_sql_unitaire
    ERROR_SQL_U="err"
endif

# -------------------------------------------------------- #
# Vérifie l'état des containers avant de permettre les run #
# -------------------------------------------------------- #

# Vérifie si le container Sql est déjà lancé
.PHONY: verifier_sql
verifier_sql:
ifdef ERROR_SQL
	$(error "Un container Sql est déjà en cours d'exécution.")
endif
ifdef EXISTE_SQL
	$(error "Un container Sql a déjà été construit.")
endif

# Vérifie si le container PHP est déjà lancé
.PHONY: verifier_php
verifier_php:
ifdef ERROR_PHP
	$(error "Un container PHP est déjà en cours d'exécution.")
endif
ifdef EXISTE_PHP
	$(error "Un container PHP a dèjà été construit.")
endif

# Vérifie si le container NginX est déjà lancé
.PHONY: verifier_nginx
verifier_nginx:
ifdef ERROR_NGINX
	$(error "Un container NginX est déjà en cours d'exécution.")
endif
ifdef EXISTE_NGINX
	$(error "Un container NginX a déjà été construit.")
endif

.PHONY: verifier_sql_unitaire
verifier_sql_unitaire:
ifeq ($(shell docker ps --quiet --filter "name=$(Sql_U_Nom_Cont)" ), )
	$(error "Lancez le container $(Sql_U_Nom_Cont) avant avec : make run_unitaire_sql" )
endif
